"""
Master Thesis
Network Monitoring and Attack Detection

csv_labeller.py
Functions used to label the .csv files holding the features generated by the FLowMeter and KDD feature-extraction tools


@author: Nicolas Kaenzig, D-ITET, ETH Zurich
"""

import ipaddress
import os
import json
import csv
import threading


def csv_label_malicious_ips(csv_path, malicious_ips_path, out_dir=None):
    """
    Function used for "host-labelling"

    :param csv_path: Path to the .csv file to be labelled
    :param malicious_ips_path: Path to the .json file holding all malicious IPs
    :param out_dir: Directory where the new .csv should be written to. (Same directory if None)
    """
    if out_dir:
        labelled_samples_path = os.path.join(out_dir, os.path.basename(os.path.splitext(csv_path)[0]) + '-labelled.csv')
    else:
        labelled_samples_path = os.path.join(os.path.dirname(csv_path), os.path.basename(os.path.splitext(csv_path)[0]) + '-labelled.csv')

    nr_labeled = 0
    nr_flows = 0
    nr_src = 0
    nr_dst = 0
    skipped = 0
    add_label_column = False

    with open(malicious_ips_path, 'r') as fp:
        malicious_ips = json.load(fp)['malicious_ips']
    # convert to set for faster lookups
    malicious_ips = set(malicious_ips)

    with open(csv_path, 'r') as csv_r, open(labelled_samples_path, 'w') as csv_w:
        csv_reader = csv.reader(csv_r, delimiter='\t', quotechar='#')
        csv_writer = csv.writer(csv_w, delimiter='\t', quotechar='#')

        header = csv_reader.__next__()
        src_ip_idx = header.index('srcIP')
        dst_ip_idx = header.index('dstIP')
        if 'Label' in header:
            label_idx = header.index('Label')
        else:
            header.append('Label')
            add_label_column = True

        csv_writer.writerow(header)
        for row in csv_reader:
            nr_flows += 1

            if row[src_ip_idx] in malicious_ips or row[dst_ip_idx] in malicious_ips:
                if row[src_ip_idx] in malicious_ips:
                    nr_src +=1
                if row[dst_ip_idx] in malicious_ips:
                    nr_dst +=1

                if add_label_column:
                    row.append('1')
                else:
                    row[label_idx] = '1' # 1 encodes malicious, 0 encodes normal
                nr_labeled += 1
            else:
                if add_label_column:
                    row.append('0')
                else:
                    row[label_idx] = '0'
            csv_writer.writerow(row)

    print('{}/{} in {} were labelled as malicious ({}%)'.format(nr_labeled, nr_flows, csv_path, nr_labeled*100/nr_flows))
    print('src: {}\ndst: {}'.format(nr_src, nr_dst))


def add_internal_external_feature_to_csv(csv_path, internal_prefixes):
    """
    Function used to add the Dst Int Ext feature to a FlowMeter .csv file.
    Note that this feature can also be generated by the FLowMeter tool directly.

    :param csv_path: Path of the FlowMeter .csv
    :param internal_prefixes: List of prefixes in CIDR format of the internal network
    """
    out_path = os.path.splitext(csv_path)[0] + '-intExt.csv'

    with open(csv_path, 'r') as csv_r, open(out_path, 'w') as csv_w:
        csv_reader = csv.reader(csv_r, delimiter=',', quotechar='#')
        csv_writer = csv.writer(csv_w, delimiter=',', quotechar='#')

        header = csv_reader.__next__()
        dst_ip_idx = header.index('Dst IP')
        new_header = header[:-1] + ['dstIntExt', 'Label']

        internal = False

        csv_writer.writerow(new_header)
        for row in csv_reader:
            dst_ip = row[dst_ip_idx]

            for prefix in internal_prefixes:
                if ipaddress.ip_address(dst_ip) in ipaddress.ip_network(prefix):
                    row.insert(-1, '0') # '0' for internal IPs
                    internal = True
            if not internal:
                row.insert(-1, '1')  # '1' for external IPs

            internal = False

            csv_writer.writerow(row)


def label_multiple_files(csv_directory, malicious_ips_path):
    """
    Function used to label multiple files in a directory (host-labelling)

    :param csv_directory: Directory holding the .csvs
    :param malicious_ips_path: Path to the .json file holding all malicious IPs
    """
    filenames = os.listdir(csv_directory)
    out_dir = os.path.join(csv_directory, 'Labelled')

    if not os.path.exists(out_dir):
        os.makedirs(out_dir)

    for filename in filenames:
        if filename.endswith(".csv"):
            filepath = os.path.join(csv_directory, filename)
            print('Labelling {} ...'.format(filepath))
            csv_label_malicious_ips(filepath, malicious_ips_path, out_dir=out_dir)


if __name__ == "__main__":
    extracted_path17 = '../data/extracted/ls17'
    malicious_ips_path17 = os.path.join(extracted_path17, 'malicious_ips.json')

    extracted_path18 = '../data/extracted/ls18'
    malicious_ips_path18 = os.path.join(extracted_path18, 'malicious_ips.json')

    # HOST-LABELLING
    flows_paths = ['/home/ls19/flows/ls17/full/t2full_flows.txt']
    malicious_ips = [malicious_ips_path17]
    threads = []
    try:
        for i in range(len(flows_paths)):
            thread = threading.Thread(target=csv_label_malicious_ips, args=(flows_paths[i], malicious_ips[i]))
            thread.start()
        for t in threads:
            t.join()
    except:
        print("Unable to start thread")
